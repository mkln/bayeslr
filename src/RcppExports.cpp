// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// full_cond_sigmasq
double full_cond_sigmasq(double a, double b, const arma::mat& X, const arma::vec& y, const arma::vec& beta);
RcppExport SEXP _bayeslr_full_cond_sigmasq(SEXP aSEXP, SEXP bSEXP, SEXP XSEXP, SEXP ySEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(full_cond_sigmasq(a, b, X, y, beta));
    return rcpp_result_gen;
END_RCPP
}
// gibbs_sampler
Rcpp::List gibbs_sampler(const arma::vec& y, const arma::mat& X, const arma::vec& m, const arma::mat& M, double a, double b, int N);
RcppExport SEXP _bayeslr_gibbs_sampler(SEXP ySEXP, SEXP XSEXP, SEXP mSEXP, SEXP MSEXP, SEXP aSEXP, SEXP bSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type m(mSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type M(MSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    rcpp_result_gen = Rcpp::wrap(gibbs_sampler(y, X, m, M, a, b, N));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_bayeslr_full_cond_sigmasq", (DL_FUNC) &_bayeslr_full_cond_sigmasq, 5},
    {"_bayeslr_gibbs_sampler", (DL_FUNC) &_bayeslr_gibbs_sampler, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_bayeslr(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
